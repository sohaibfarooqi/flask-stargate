Guidelines on creating API Endpoints
====================================

To use this project you first need to define all your models and relationships using using 
`Flasks'` extention ``Flask-Sqlalchemy``. Check out docs : `flask_sqlahcemy_docs`_.

Lets consider the example in quickstart again. I am going to skip model definition, Flask and Flask-Sqlalchemy initilization

.. sourcecode:: python

	from stargate import ResourceManager
	from models import User

	manager = ResourceManager(app, flask_sqlalchemy_db = db)
	manager.register_resource(User, methods = ['GET'])

First line initilize ``ResourceManager`` instance, which requires ``Flask`` app and 
``SqlAlchemy`` instance

Second line exposes HTTP GET method for ``User`` model. If you are running this at your localhost you 
can excess this resource at: http://127.0.0.1:5000/api/user
By default the resource endpoint will be ``Resource.__tablename__``.

=========================
Customizing API Endpoints
=========================

You can specify custom url_prefix for all models registered with a ``ResourceManager``

.. sourcecode:: python
	
	manager = ResourceManager(app, flask_sqlalchemy_db = db, url_prefix = '/v1')

Specifying url_prefix only for a resource

.. sourcecode:: python
	
	manager.register_resource(User, url_prefix = '/adminusers')

Specifying Http Methods

.. sourcecode:: python
	
	manager.register_resource(User, methods = ['GET'], methods = ['GET', 'POST'])

Any other Http method will result in 405 (MethodNotAllowed)

Specifying endpoint:
	
.. sourcecode:: python
	
	manager.register_resource(User, methods = ['GET'], collection_name = 'my_custom_collection')

Now on localhost ``User`` resource is accessible at: http://127.0.0.1:5000/api/my_custom_collection

Specifying Model attributes:
	
.. sourcecode:: python
	
	manager.register_resource(User, methods = ['GET'], fields = ['name', 'username'])

Now GET request on ``/user`` will only result in ``name`` and ``username`` keys. Primary key will always be included in response. 

Specifying attributes to exclude:
	
.. sourcecode:: python
	
	manager.register_resource(User, methods = ['GET'], exclude = ['name', 'username'])

The response will result in all attributes of ``User`` except ``name`` and ``username``.

.. _flask_sqlahcemy_docs: http://flask-sqlalchemy.pocoo.org/2.1/